#version 450

#include "Shaders/Includes/Camera.h"

layout(set = 0, binding = 0) uniform GlobalBuffer
{
    Camera camera;
};

layout(set = 1, binding = 0) uniform sampler2D normalTexture;
layout(set = 1, binding = 1) uniform sampler2D shadingTexture;
layout(set = 1, binding = 3) uniform sampler2D colorTexture;
layout(set = 1, binding = 4) uniform sampler2D depthTexture;

layout(set = 1, binding = 5) uniform SSR
{
    vec2 viewportScale;
    float maxDistance;
    float resolution;
    int stepCount;
    float thickness; 
};

layout(set = 1, binding = 6, rgba8) uniform writeonly image2D outColor;
layout(set = 1, binding = 7, rgba16f) uniform image2D outEmissive;

void RayMarch(
    in vec2 viewportSize,
    in vec3 positionFrom,
    in vec3 pivot,
    in vec3 unitPosition,
    in float roughness,
    in vec2 viewRay,
    out vec4 color,
    out vec4 emissive)
{
    vec4 start = vec4(positionFrom, 1.0f);
    vec4 end = vec4(positionFrom + (pivot * maxDistance), 1.0f);

    vec4 startFragment = start;
    // Project to screen space.
    startFragment = camera.projectionMat4 * startFragment;
    // Perform the perspective divide.
    startFragment.xyz /= startFragment.w;
    // Convert the screen-space XY coordinates to UV coordinates.
    startFragment.xy = startFragment.xy * 0.5f + 0.5f;
    // Note: Only for Vulkan need to flip Y!
    startFragment.y = 1.0f - startFragment.y;
    // Convert the UV coordinates to fragment/pixel coordnates.
    startFragment.xy *= viewportSize;

    vec4 endFragment = end;
    endFragment /= endFragment.z < 0.0f ? endFragment.z : 1.0f;
    endFragment = camera.projectionMat4 * endFragment;
    endFragment.xyz /= endFragment.w;
    endFragment.xy = endFragment.xy * 0.5f + 0.5f;
    endFragment.y = 1.0f - endFragment.y;
    endFragment.xy *= viewportSize;

    vec2 fragment = startFragment.xy;
    vec2 fragmentUV = fragment / viewportSize;

    float deltaX = endFragment.x - startFragment.x;
    float deltaY = endFragment.y - startFragment.y;

    float useX = abs(deltaX) >= abs(deltaY) ? 1.0f : 0.0f;
    float delta = mix(abs(deltaY), abs(deltaX), useX) * clamp(resolution * (1.0f - roughness * 0.5f), 0.0f, 1.0f);
    vec2 increment = vec2(deltaX, deltaY) / max(delta, 0.001f);

    float search0 = 0.0f;
    float search1 = 0.0f;

    int hit0 = 0;
    int hit1 = 0;

    float viewDistance = start.z;
    float depth = thickness;

    vec3 positionTo = positionFrom;

    int i = 0;
    for (i = 0; i < int(delta); ++i)
    {
        fragment += increment;
        fragmentUV = fragment / viewportSize;
        positionTo = CalculatePositionFromDepth(
            texture(depthTexture, fragmentUV).x,
            camera.projectionMat4,
            viewRay);

        search1 = mix((fragment.y - startFragment.y) / deltaY, (fragment.x - startFragment.x) / deltaX, useX);

        viewDistance = (start.z * end.z) / mix(end.z, start.z, search1);
        depth = positionTo.z - viewDistance;

        if (depth > 0 && depth < thickness)
        {
            hit0 = 1;
            break;
        }
        else
        {
            search0 = search1;
        }
    }

    search1 = search0 + ((search1 - search0) / 2.0f);

    for (i = 0; i < stepCount * hit0; ++i)
    {
        fragment = mix(startFragment.xy, endFragment.xy, search1);
        fragmentUV.xy = fragment / viewportSize;
        positionTo = CalculatePositionFromDepth(
            texture(depthTexture, fragmentUV).x,
            camera.projectionMat4,
            viewRay);

        viewDistance = (start.z * end.z) / mix(end.z, start.z, search1);
        depth = positionTo.z - viewDistance;

        bool hit = depth > 0 && depth < thickness;

        hit1 = hit ? 1 : hit1;

        float temp = search1;
        search1 = hit ? search0 + ((search1 - search0) / 2.0f) : search1 + ((search1 - search0) / 2.0f);
        search0 = hit ? search0 : temp;
    }

    float visibility = hit1 * (1.0f - max(dot(-unitPosition, pivot), 0.0f))
        * (1.0f - clamp(depth / thickness, 0.0f, 1.0f))
        * (1.0f - clamp(length(positionFrom - positionTo) / maxDistance, 0.0f, 1.0f))
        * (fragmentUV.x < 0.0f || fragmentUV.x > 1.0f ? 0.0f : 1.0f)
        * (fragmentUV.y < 0.0f || fragmentUV.y > 1.0f ? 0.0f : 1.0f);

    visibility = clamp(visibility, 0.0f, 1.0f);

    vec3 sceneColor = texture(colorTexture, fragmentUV).xyz;

    ivec2 emissivePixelCoord = ivec2(fragmentUV * imageSize(outEmissive));
    vec3 bloomColor = imageLoad(outEmissive, emissivePixelCoord).xyz;

    color = vec4(mix(vec3(0.0f, 0.0f, 0.0f), sceneColor, visibility), visibility);
    emissive = vec4(mix(vec3(0.0f, 0.0f, 0.0f), bloomColor, visibility), visibility);
}

float random(vec2 uv)
{
    return fract(sin(dot(uv, vec2(12.9898f, 78.233f))) * 43758.5453123f);
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    vec2 viewportSize = camera.viewportSize * viewportScale;

	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(pixelCoord) + vec2(0.5f)) / viewportSize;
	vec2 screenPosition = uv * 2.0f - 1.0f;

	vec2 viewRay;
	viewRay.x = -screenPosition.x * camera.aspectRatio * camera.tanHalfFOV;
    viewRay.y = screenPosition.y * camera.tanHalfFOV;

    vec4 normalViewSpace = texture(normalTexture, uv);
    vec2 shading = texture(shadingTexture, uv).xy;
    if (normalViewSpace.a <= 0.0f || shading.x <= 0.0f)
    {
        imageStore(outColor, pixelCoord, vec4(0.0f, 0.0f, 0.0f, 0.0f));
        return;
    }

    vec3 positionViewSpace = CalculatePositionFromDepth(
        texture(depthTexture, uv).x,
        camera.projectionMat4,
        viewRay);

    vec3 unitPosition = normalize(positionViewSpace);
    vec3 pivot = normalize(reflect(unitPosition, normalize(normalViewSpace.xyz)));
    if (pivot.z > 0.0f)
    {
        imageStore(outColor, pixelCoord, vec4(0.0f, 0.0f, 0.0f, 0.0f));
        return;
    }

    vec4 color;
    vec4 emissive;
    RayMarch(viewportSize, positionViewSpace, pivot, unitPosition, shading.y, viewRay, color, emissive);
    color *= clamp(abs(pivot.z) / 0.1f, 0.0f, 1.0f);
    emissive *= clamp(abs(pivot.z) / 0.1f, 0.0f, 1.0f);

    ivec2 emissivePixelCoord = ivec2(uv * imageSize(outEmissive));
    vec4 emissiveSource = imageLoad(outEmissive, emissivePixelCoord);
    
    imageStore(outColor, pixelCoord, color);
    imageStore(outEmissive, emissivePixelCoord, emissiveSource + emissive);
}
